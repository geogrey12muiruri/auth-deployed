datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  TRAINEE
  TRAINER
  HOD
  ADMIN
  REGISTRAR
  STAFF
  SUPER_ADMIN
  MANAGEMENT_REP
  AUDITOR
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          UserRole
  verified      Boolean   @default(false)
  tenantId      String    // Store tenantId as a plain string
  tenantName    String    // Add tenantName to store the tenant's name
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshTokens RefreshToken[]
  auditor       Auditor?  @relation
  managementRep ManagementRep? @relation
  trainee       Trainee?  @relation
  trainer       Trainer?  @relation
  hod           HOD?      @relation
  admin         Admin?    @relation
  registrar     Registrar? @relation
  staff         Staff?    @relation
  superAdmin    SuperAdmin? @relation
}

model Auditor {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model ManagementRep {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Trainee {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Trainer {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model HOD {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Admin {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Registrar {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Staff {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model SuperAdmin {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime  @default(now())
}