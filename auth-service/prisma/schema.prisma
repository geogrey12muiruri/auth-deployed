datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  roleId        String?   // Foreign key for Role
  role          Role?     @relation(fields: [roleId], references: [id]) // Relation to Role
  verified      Boolean   @default(false)
  tenantId      String    // Store tenantId as a plain string
  tenantName    String    // Add tenantName to store the tenant's name
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshTokens RefreshToken[]
  auditors       Auditor[]
  managementReps ManagementRep[]
  trainees       Trainee[]
  trainers       Trainer[]
  hods           HOD[]
  admins         Admin[]
  registrars     Registrar[]
  staff          Staff[]
  superAdmins    SuperAdmin[]
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  tenantId    String    // Tenant-specific roles
  users       User[]    // Users assigned to this role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, tenantId]) // Ensure role names are unique within a tenant
}

model Auditor {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model ManagementRep {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Trainee {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Trainer {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model HOD {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Admin {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Registrar {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model Staff {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model SuperAdmin {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String  // Tenant ID for isolation
  tenantName String // Tenant name for isolation
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime  @default(now())
}