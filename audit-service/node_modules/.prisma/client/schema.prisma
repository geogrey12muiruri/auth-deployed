generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  role           String // Role of the user (e.g., AUDITOR)
  tenantId       String // Tenant ID for isolation
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  acceptedAudits AcceptedAudit[] // Relation to AcceptedAudit
}

model AcceptedAudit {
  id         String   @id @default(uuid())
  auditId    String
  auditorId  String
  audit      Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [auditorId], references: [id]) // Add this relation
  acceptedAt DateTime @default(now())

  @@unique([auditId, auditorId]) // Composite unique constraint
}

model AuditProgram {
  id                    String   @id
  name                  String
  auditProgramObjective String?
  status                String   @default("Draft")
  startDate             DateTime
  endDate               DateTime
  tenantId              String // Store tenantId directly
  tenantName            String // Store tenantName directly
  createdBy             String // User ID of creator
  audits                Audit[] // One-to-many relation to audits
  createdAt             DateTime @default(now())
}

model Audit {
  id                     String          @id
  auditProgramId         String
  auditProgram           AuditProgram    @relation(fields: [auditProgramId], references: [id], onDelete: Cascade)
  scope                  Json? // Store array as JSON
  specificAuditObjective Json? // Store array as JSON
  methods                Json? // Store array as JSON
  criteria               Json? // Store array as JSON
  team                   Json? // JSON object for team
  createdAt              DateTime        @default(now())
  acceptedAudits         AcceptedAudit[] // Relation to AcceptedAudit
}
